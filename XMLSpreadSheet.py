# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from lxml import etree
from copy import deepcopy
import glob
import os
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.Qt import QStandardItemModel, QStandardItem
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *


class StandardItem(QStandardItem):
    def __init__(self,txt="",font_size=12,set_bold=False, color=QColor(0,0,0),editable=False):
        super().__init__()
        
        fnt =QFont('Open Sans',font_size)
        fnt.setBold(set_bold)
        
        self.setEditable(editable)
        self.setForeground(color)
        self.setFont(fnt)
        self.setText(txt)


NAMCOL = 1
TAGCOL = 0
VALCOL = 2
FORMULCOL = 3
IDCOL = 4
NOFCOLS=5        

class Ui_MainWindow(object):

    def __init__(self): 
        parser=etree.XMLParser(remove_blank_text=True)
        self.file_list = glob.glob('database/*.xml')
        self.currentfile=self.file_list[0]
        self.root_node=etree.parse(self.currentfile,parser)
        self.ProcessXml(self.root_node)
        self.olduid=""
        self.uid=0
        self.selectednode = None
        self.firsttime = True
        
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
       
        self.grdLayoutLeft = QtWidgets.QGridLayout()
        self.grdLayoutLeft.setContentsMargins(2, 7, -1, -1)
        self.grdLayoutLeft.setObjectName("grdLayoutLeft")
        self.fileList = QtWidgets.QComboBox(self.centralwidget)
        self.fileList.setObjectName("fileList")
        self.grdLayoutLeft.addWidget(self.fileList, 0, 1, 1, 2)
        
        self.newNodeBUT = QtWidgets.QPushButton(self.centralwidget)
        self.newNodeBUT.setObjectName("newNodeBUT")
        self.grdLayoutLeft.addWidget(self.newNodeBUT, 1, 0, 1, 1)

        
        self.insertNodeBUT = QtWidgets.QPushButton(self.centralwidget)
        self.insertNodeBUT.setObjectName("insertNodeBUT")
        self.grdLayoutLeft.addWidget(self.insertNodeBUT, 1, 1, 1, 1)
        self.ExpandTreeButton = QtWidgets.QRadioButton(self.centralwidget)
        self.ExpandTreeButton.setObjectName("ExpandTreeButton")
        self.grdLayoutLeft.addWidget(self.ExpandTreeButton, 0, 0, 1, 1)
        self.RemoveNodeBUT = QtWidgets.QPushButton(self.centralwidget)
        self.RemoveNodeBUT.setObjectName("RemoveNodeBUT")
        self.grdLayoutLeft.addWidget(self.RemoveNodeBUT, 1, 2, 1, 1)
        self.moveUpBUT = QtWidgets.QPushButton(self.centralwidget)
        self.moveUpBUT.setObjectName("moveUpBUT")
        self.grdLayoutLeft.addWidget(self.moveUpBUT, 0, 4, 1, 1)
        self.moveDownBUT = QtWidgets.QPushButton(self.centralwidget)
        self.moveDownBUT.setObjectName("moveDownBUT") 
        self.grdLayoutLeft.addWidget(self.moveDownBUT, 1, 4, 1, 1)
        self.recalculatenBUT = QtWidgets.QPushButton(self.centralwidget)
        self.recalculatenBUT.setObjectName("recalculatenBUT") 
        self.grdLayoutLeft.addWidget(self.recalculatenBUT, 1, 5, 1, 1)
        
        
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        
        self.gridLayout.addLayout(self.grdLayoutLeft, 0, 0, 1, 1)
        self.treeView = QtWidgets.QTreeView(self.centralwidget)
        self.treeView.setObjectName("treeView")
        self.gridLayout.addWidget(self.treeView, 2, 0, 1, 1)
        self.FormulaView = QtWidgets.QTextEdit(self.centralwidget)
        self.FormulaView.setObjectName("TextView")
        

        self.gridLayout.addWidget(self.FormulaView, 2, 1, 1, 1)
        self.grdLayoutRight = QtWidgets.QGridLayout()
        self.grdLayoutRight.setContentsMargins(-1, 7, -1, -1)
        self.grdLayoutRight.setObjectName("grdLayoutRight")
        #self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        #self.pushButton_4.setObjectName("pushButton_4")
        #self.grdLayoutRight.addWidget(self.pushButton_4, 0, 0, 1, 1)
        #self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        #self.pushButton_3.setObjectName("pushButton_3")
        #self.grdLayoutRight.addWidget(self.pushButton_3, 0, 1, 1, 1)

        
        self.gridLayout.addLayout(self.grdLayoutRight, 0, 1, 1, 1)
        
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 30))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        #self.menuEdit = QtWidgets.QMenu(self.menubar)
        #self.menuEdit.setObjectName("menuEdit")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        #self.actionOpen_2 = QtWidgets.QAction(MainWindow)
        #self.actionOpen_2.setObjectName("actionOpen_2")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSaveAs = QtWidgets.QAction(MainWindow)
        self.actionSaveAs.setObjectName("actionSaveAs")
        self.menufile.addAction(self.actionOpen)
        #self.menufile.addAction(self.actionOpen_2)
        self.menufile.addAction(self.actionSave)
        self.menufile.addAction(self.actionSaveAs)
        self.menubar.addAction(self.menufile.menuAction())
        #self.menubar.addAction(self.menuEdit.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.treeView.clicked.connect(self.TreeItemSelected)
        self.actionSave.triggered.connect(self.Savexml)
        self.newNodeBUT.clicked.connect(self.NewNode)
        self.insertNodeBUT.clicked.connect(self.InsertNode)
        self.RemoveNodeBUT.clicked.connect(self.RemoveNode)
        self.moveUpBUT.clicked.connect(self.MoveUp)
        self.moveDownBUT.clicked.connect(self.MoveDown)
        self.ExpandTreeButton.toggled.connect(self.Expandtree)
        self.recalculatenBUT.clicked.connect(self.Recalculate)
        self.DisplayQTree()
        self.FormulaView.setReadOnly(True)
        self.fileList.addItems(self.file_list)
        self.fileList.currentIndexChanged.connect(self.LoadFile)
        
    def LoadFile(self,MainWindow):
        self.olduid=""
        self.uid=0
        parser=etree.XMLParser(remove_blank_text=True)
        self.currentfile=self.file_list[self.fileList.currentIndex()]
        self.root_node=etree.parse(self.currentfile,parser)
        self.ProcessXml(self.root_node)
        self.firsttime = True
        self.DisplayQTree()
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.newNodeBUT.setText(_translate("MainWindow", "New Node"))
        self.ExpandTreeButton.setText(_translate("MainWindow", "Expand"))
        self.RemoveNodeBUT.setText(_translate("MainWindow", "Remove Node"))
        self.insertNodeBUT.setText(_translate("MainWindow", "Insert Node"))
        #self.pushButton_4.setText(_translate("MainWindow", "Accept"))
        self.moveUpBUT.setText(_translate("MainWindow", "MoveUp"))
        self.moveDownBUT.setText(_translate("MainWindow", "MoveDown"))
        self.recalculatenBUT.setText(_translate("MainWindow", "ReCalculate"))
        #self.pushButton_3.setText(_translate("MainWindow", "PushButton"))
        self.menufile.setTitle(_translate("MainWindow", "File"))
        #self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.actionOpen.setText(_translate("MainWindow", "New"))
        #self.actionOpen_2.setText(_translate("MainWindow", "Open"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSaveAs.setText(_translate("MainWindow", "SaveAs"))
        
    def DisplayQTree(self):
        self.NodeMap={}
        self.model = QStandardItemModel(0,NOFCOLS)
        modelrootnode=self.model.invisibleRootItem()
        self.ParseXML(self.root_node,modelrootnode)
        #print(self.NodeMap)
        self.treeView.setModel(self.model)
        self.model.setHeaderData(TAGCOL, Qt.Horizontal, "TAG")
        self.treeView.header().resizeSection(TAGCOL, 200)
        
        self.model.setHeaderData(VALCOL, Qt.Horizontal, "VALUE")
        self.treeView.header().resizeSection(VALCOL, 150)
        
        
        self.model.setHeaderData(IDCOL, Qt.Horizontal, "ID")
        self.model.setHeaderData(FORMULCOL, Qt.Horizontal, "FORMULA")
        self.treeView.header().resizeSection(FORMULCOL, 150)
        
        self.model.setHeaderData(NAMCOL, Qt.Horizontal, "NAME")
        self.treeView.header().resizeSection(NAMCOL, 150)
        #self.treeView.hideColumn(IDCOL)
        if self.ExpandTreeButton.isChecked():
            self.treeView.expandAll()
        if len(self.olduid)>0:
            self.treeView.expand(self.selectednode)
            paren=self.selectednode.parent()
            while paren.isValid():
                self.treeView.expand(paren)
                paren=paren.parent()
            self.treeView.setCurrentIndex(self.selectednode)
            #print(self.selectednode.data())
        self.model.dataChanged.connect(self.treeValueModified)
        self.olduid=""
        self.firsttime=False
        
    def ParseXML(self,rootnode,modelrootnode):
        for child in rootnode.xpath('*'):
            sub_tag = StandardItem(child.tag,12,editable=True)
            self_uid=""
            if self.firsttime:
                self.NodeMap[str(self.uid)]=child
                self_uid=str(self.uid)
                self.uid=self.uid+1
                child.attrib['id']=self_uid
            else:
                if len(child.xpath('@id'))>0:
                    self_uid=child.xpath('@id')[0]
                    self.NodeMap[self_uid]=child
                else:
                    self.NodeMap[str(self.uid)]=child
                    self_uid=str(self.uid)
                    self.uid=self.uid+1
                    child.attrib['id']=self_uid
                    
            sub_id = StandardItem(str(self_uid),12)
            
            sub_name = StandardItem("",12,editable=True) 
            if len(child.xpath('@name'))>0:
                sub_name = StandardItem(child.xpath('@name')[0],12,editable=True)
                
            sub_formula = StandardItem("",12,editable=True) 
            if len(child.xpath('@formula'))>0:
                sub_formula = StandardItem(child.xpath('@formula')[0],12,editable=True)
                
            #print(child.text)
            sub_value = StandardItem("",12)
            if (not child.text) and (len(child)>0) :
                sub_value = StandardItem("",12)
            else:
                sub_value = StandardItem(child.text,12,editable=True)

            items=[sub_tag]*NOFCOLS
            items[TAGCOL]=sub_tag
            items[VALCOL]=sub_value
            items[IDCOL]=sub_id
            items[FORMULCOL]=sub_formula
            items[NAMCOL]=sub_name
            modelrootnode.appendRow(items)
                
            if str(self_uid)==self.olduid:
                self.selectednode=self.model.indexFromItem(modelrootnode.child(modelrootnode.rowCount()-1))
            if len(child):
                self.ParseXML(child,sub_tag)       
        
        
    def Expandtree(self):
        if self.ExpandTreeButton.isChecked():
            self.treeView.expandAll()
        else:
            self.treeView.collapseAll()    
            
    #Manual operation
    def RemoveNode(self):        
        if len(self.treeView.selectionModel().selectedRows(column=IDCOL))==0:
            return
        
        uid=self.treeView.selectionModel().selectedRows(column=IDCOL)[0].data()
        self.olduid=str(int(uid)-1)
        nodeSelected=self.NodeMap[uid]
        nodeSelected.getparent().remove(nodeSelected)
        self.DisplayQTree()
      
    #Manual operation
    def InsertNode(self):
        if len(self.treeView.selectionModel().selectedRows(column=IDCOL))==0:
            return
        uid=self.treeView.selectionModel().selectedRows(column=IDCOL)[0].data()
        nodeSelected=self.NodeMap[uid]
        self.olduid=uid
        xml_node = etree.Element("newnode")
        nodeSelected.insert(len(nodeSelected),xml_node)
        self.DisplayQTree()
          
    #Manual operation
    def NewNode(self):
        if len(self.treeView.selectionModel().selectedRows(column=IDCOL))==0:
            return
        uid=self.treeView.selectionModel().selectedRows(column=IDCOL)[0].data()
        nodeSelected=self.NodeMap[uid]
        self.olduid=uid
        xml_node = etree.Element("newnode")
        nodeSelected.getparent().insert(len(nodeSelected),xml_node)
        self.DisplayQTree()
        
    #Manual operation   
    def MoveUp(self):
        if len(self.treeView.selectionModel().selectedRows(column=IDCOL))==0:
            return
        index=self.treeView.selectionModel().selectedRows(column=IDCOL)[0]
        uid=index.data()
        row=index.row()
        nodeSelected=self.NodeMap[uid]
        self.olduid=uid
        #xml_node = etree.Element("newnodeok")
        print("======================")
        print(row)
        print(etree.tostring(nodeSelected.getparent()).decode())
        if index.row() > 0 :
            nodeSelected.getparent().insert(row-1,nodeSelected)
            self.model.removeRow(index.row()+1, parent=index.parent())
        self.DisplayQTree()
        
    #Manual operation
    def MoveDown(self):
        if len(self.treeView.selectionModel().selectedRows(column=IDCOL))==0:
            return
        index=self.treeView.selectionModel().selectedRows(column=IDCOL)[0]
        uid=index.data()
        row=index.row()
        nodeSelected=self.NodeMap[uid]
        self.olduid=uid
        #xml_node = etree.Element("newnodeok")
        print("======================")

        print(row)
        print(etree.tostring(nodeSelected.getparent()).decode())
        if index.row()+2 <= len(nodeSelected.getparent().getchildren()):
            nodeSelected.getparent().insert(row+2,nodeSelected)
            self.model.removeRow(index.row(), parent=index.parent())
        self.DisplayQTree()

    #Manual operation   
    def treeValueModified(self,topleft,bottomright,roles):
        uid=self.treeView.selectionModel().selectedRows(column=IDCOL)[0].data()
        if topleft.column()==TAGCOL :
            self.NodeMap[uid].tag=topleft.data()
        elif  topleft.column()==VALCOL :
            self.NodeMap[uid].text=topleft.data()
        elif  topleft.column()==FORMULCOL :
            self.NodeMap[uid].attrib['formula']=topleft.data()
        elif topleft.column()==NAMCOL :
            self.NodeMap[uid].attrib['name']=topleft.data()
        else:
             print("wrong column no")
             return
        
        self.Recalculate()

        

    #for expanding as per template        
    def mergeNode(self,aparent, bparent):
        for bchild in bparent.getchildren():
            achild = aparent.xpath('./' + bchild.tag)
            if not achild:
                aparent.insert(len(aparent),bchild)
            else: #if bchild.getchildren():
                self.mergeNode(achild[0], bchild)
        
     
    #for updating formulaviewer
    def TreeItemSelected(self,val):
        #print("-----------------------------------------")
        #print("clicked -"+val.data())
        #print(val.child(0,1))
        #print(val.row())
        #print(val.column())
        #print(self.treeView.selectionModel().selectedRows(column=TAGCOL)[0].data())
        formula=self.treeView.selectionModel().selectedRows(column=FORMULCOL)[0].data()
        if formula in self.Formulas:
            self.FormulaView.setText(self.Formulas[formula])
        else:
            self.FormulaView.setText("")
        
        #print("-----------------------------------------")
        

        
        
    def Recalculate(self):
        self.ProcessXml(self.root_node)
        self.DisplayQTree()
        
    #Process xml using xml schema transformation
    #Based on the identity of formula following operations are carried out
    #-xx_value only value is replaced
    #-xx_template only merge operatation is done
    #-otherwise replace operation is carried out
    def ProcessXml(self, rootnode):
        self.Formulas={}
        formulafile=open('database/rules.txt','r')
        formulas=formulafile.read().split('XSLT_END')
        for formula in formulas:
            if len(formula)==0:
                continue
            parts=formula.split('XSLT_START')
            if len(parts)<2:
                continue
            formulaIdentity=parts[0].strip()
            formulaContent=parts[1]
            self.Formulas[formulaIdentity]=formulaContent
            nodestoexpand=rootnode.findall("//*[@formula='"+formulaIdentity+"']")
            for node in nodestoexpand:
                nodeName=""
                nodeValue=""
                if len(node.xpath('@name'))>0:
                    nodeName=node.xpath('@name')[0]
                if len(node.xpath('@value'))>0:
                    nodeValue=node.xpath('@value')[0]
                parentpath=rootnode.getpath(node.getparent())
                formulaContent=formulaContent.replace("$this",rootnode.getpath(node))
                formulaContent=formulaContent.replace("$parent",parentpath)
                try:
                    styleroot = etree.fromstring(formulaContent)
                    transform = etree.XSLT(styleroot)
                    newdom = transform(rootnode)
                    newxml = etree.fromstring(etree.tostring(newdom))
                    print(etree.tostring(newdom))
                    if formulaIdentity.find("_value")>-1:
                        new_value=newxml.text
                        node.text=new_value
                        continue
                    if formulaIdentity.find("_template")>-1:
                        self.mergeNode(node, newxml)
                        continue
                    #replace node in xml
                    
                    nodeTag=node.tag
                    node.getparent().replace(node,newxml)
                    newxml.attrib['formula']=formulaIdentity
                    newxml.attrib['name']=nodeName
                    newxml.tag=nodeTag
                except etree.XMLSyntaxError as error:
                    QMessageBox.critical(MainWindow,"ERROR","formula "+ formulaIdentity+"\n'database/rules.txt'\n"+str(error))
                    return
                except etree.XSLTParseError as error:
                    QMessageBox.critical(MainWindow,"ERROR","formula "+ formulaIdentity+"\n'database/rules.txt'\n"+str(error))
                    return

        
    def Savexml(self):
        #self.root_node.write('database/db.xml',encoding="utf-8",pretty_print=True)
        f=open(self.currentfile,'w')
        
        f.write(etree.tostring(self.root_node,pretty_print=True).decode())
        f.close()
        print("saving database/db.xml")
        
        
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
